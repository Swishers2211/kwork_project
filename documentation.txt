Документация по апи django для frontend разработчиков

Django admin url: api/admin/
Логин и пароль от Django админ панель: admin@gmail.com - 0000

1. Корень прроекта
	Корень всего проекта начинается там, где лежит файл docker-compose и папка backend, вы можете создать папку frontend в корне проекта и в docker-compose прописать это,
	чтобы все запускалось одновременно и чтобы не нужно было утснавливать все на локальную машину 

1.1 Запуск бекенда на django
	В терминале заходим в корень проекта и пишем команду docker-compose build, перед этим нужно установить сам docker если же он есть отлично
	Когда все забилдилось запускаем наш проект на django командой docker-compose up
	Все должно запустится, если же что-то не запустится будет, exit code 1 или тп

1.2 Подключение к веб версии апи
	После того как запустили docker
	Заходим в любой умеющийся у вас браузер и в поисковой строке пишем 127.0.0.1:8000 или localhost:8000
	У вас откроета страница page not found не пугайтесь так и должно быть
	Пока наш бекенд не подключен к фронтенду по страница переходим с помощью поисковой строки 

1.3 url пути страниц
	1.3.1 чат
		1. Страница списка чатов 127.0.0.1:8000/chat/api/chats/
	1.3.2 главные функции
		1. Страница ленты видео 127.0.0.1.8000/api/videos/
		2. Страница создания видео 127.0.0.1.8000/api/create_video/
		3. Страница отображение детальной информации о видео, например, комментарии 127.0.0.1:8000/api/video_detail/1/, цифра 1 это первичный ключ видео, может быть и 2 и 3
	1.3.3 Пользователи
		1. Страница регистрации аккаунта 127.0.0.1:8000/user/api/create_account/
		2. Страница входа в систему через jwt 127.0.0.1:8000/user/api/auth/
		3. Страница профиля пользователя 127.0.0.1:8000/user/api/1/, 1 первичный ключ пользователя
		4. Страница лента пользователей с которыми можно общаться 127.0.0.1:8000/user/list_user/
		5. Страница выхода из системы 127.0.0.1:8000/user/api/logout/
		6. Страница проверки авторизации пользователя 127.0.0.1:8000/user/api/check_auth/ нужно для того чтобы на фронтенде можно было получить данные если пользователь авторизован

1.4 Как связать бекенд и фронтенде
	Не важно на чем у вас написан фронтенд сейчас расскажу, как вам получить определнные данные от бекенда 
	И так чтобы получить данные от бекенда вам нужно в своем фронтенде, например, у вас есть страница списка чатов, вам на этой странице нужно сделать GET или если вам нужно отправить данные на сервер, то POST запрос на эндпоинт django
	1.4.1 Что такое Эндпоинт?
		Эндпоинт - это url адрес страницы, допустим вы хотите получить все свои чаты, то вам нужно сделать такой запрос пример взят из реакта, но у вас может быть и другой фреймворк для фронтенда
		const response = axios.get('127.0.0.1:8000/chat/api/chats/', {withCredentials: true}); и так давайте разберем axiso.get это библиотека для посылани запросов к бекенду у разных фреймворков разные библиотеки, но у какого-то может совпадать
		Параметр {withCredentials: true} - это передача куки с бекенда так сделано для того что злоумышлинники не смогли получить jwt token с помощью javascript кода
		Повторюсь еще раз у вас могут быть разные параметры и библиотеки смотря на чем у вас написан фронтенд, но суть одна и та же

1.4.2 Получения данных 
	На разных страницах разные данные и чтобы их получить или возможно отправить определнные данные на сервер , нужно знать обьекты 
	1.4.3 Данные страниц
		1.4.4 чат
			1. Страница списка чатов эндпоинт - 127.0.0.1:8000/api/chat/api/chats/ - обьекты: 'current_user_chats, user_id'
				current_user_chats - это список чатов 
				user_id - это текущий пользователь, который авторизован

		1.4.5 Основные функции
			1. Страница ленты видео 127.0.0.1.8000/api/videos/
				1.1 Объекты для GET запроса: videos
					1.2 Поля объекта: category_video, video_file, author, views_count, created_at

			2. Страница создания видео 127.0.0.1.8000/api/create_video/
				2.1 Объекты для POST запроса: category_video, video_file, author, created_at
					2.2 create_at с фронтенда должны брать текущее время и посылать его на сервер

			3. Страница отображение детальной информации о видео, например, комментарии 127.0.0.1:8000/api/video_detail/1/, цифра 1 это первичный ключ видео, может быть и 2 и 3
				3.1 Объекты для POST запроса - оствление комментариев: author, content, create_at
				3.2 Объекты для GET запроса - list_comments, video
			
		1.3.3 Пользователи
			1. Страница регистрации аккаунта 127.0.0.1:8000/api/user/api/create_account/
				1.1 Объекты для POST запроса: username, email, password, interests, birth_date

			2. Страница входа в систему через jwt 127.0.0.1:8000/api/user/api/auth/
				2.2 обьекты для POST запроса: email, password
			3. Страница профиля пользователя 127.0.0.1:8000/api/user/api/1/, 1 - это первичный ключ пользователя
				3.1 обьекты для GET запроса: email, birth_date, interests, username

			4. Страница лента пользователей с которыми можно общаться 127.0.0.1:8000/api/user/list_user/
				4.1 Объекты для GET запроса: list_user

			5. Страница выхода из системы 127.0.0.1:8000/api/user/api/logout/
				POST запрос для выхода
				
			6. Страница проверки авторизации пользователя 127.0.0.1:8000/api/user/api/check_auth/ нужно для того чтобы на фронтенде можно было получить данные если пользователь авторизован
				6.1 Объекты для GET запроса: isAuthenticated, user_id
